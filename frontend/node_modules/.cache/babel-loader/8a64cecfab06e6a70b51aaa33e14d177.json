{"ast":null,"code":"var _jsxFileName = \"D:\\\\My Projects\\\\SocialMediaApp - MERN\\\\frontend\\\\src\\\\components\\\\Chatbox\\\\Chatbox.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { getUser } from '../../api/UserReq';\nimport './Chatbox.css';\nimport { addMessage, getMessages } from '../../api/MessageRequest';\nimport { format } from 'timeago.js';\nimport InputEmoji from 'react-input-emoji';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Chatbox = _ref => {\n  _s();\n\n  let {\n    chat,\n    currentUser,\n    setSendMessage,\n    recieveMessage\n  } = _ref;\n  const scroll = useRef();\n  const [userData, setUserData] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState(\"\");\n\n  const handleChange = newMessage => {\n    setNewMessage(newMessage);\n  }; // fetching data for header \n\n\n  useEffect(() => {\n    var _chat$members;\n\n    const userId = chat === null || chat === void 0 ? void 0 : (_chat$members = chat.members) === null || _chat$members === void 0 ? void 0 : _chat$members.find(id => id !== currentUser);\n\n    const getUserData = async () => {\n      try {\n        const {\n          data\n        } = await getUser(userId);\n        setUserData(data);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    if (chat !== null) getUserData();\n  }, [chat, currentUser]); // fetching data for messages\n\n  useEffect(() => {\n    const fetchMessages = async () => {\n      try {\n        const {\n          data\n        } = await getMessages(chat._id);\n        console.log(data);\n        setMessages(data);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    if (chat != null) fetchMessages();\n  }, [chat]);\n  useEffect(() => {\n    if (recieveMessage !== null && recieveMessage.chatId === chat._id) {\n      setMessages([...messages, recieveMessage]);\n    }\n  }, [recieveMessage]); // Send Message\n\n  const handleSend = async e => {\n    e.preventDefault();\n    const message = {\n      senderId: currentUser,\n      text: newMessage,\n      chatId: chat._id\n    }; // send message to socket server\n\n    const recieverId = chat.members.find(id => id !== currentUser);\n    setSendMessage({ ...message,\n      recieverId\n    }); // send message to database\n\n    try {\n      const {\n        data\n      } = await addMessage(message);\n      setMessages([...messages, data]);\n      setNewMessage(\"\");\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ChatBox-container\",\n      children: chat ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"follower\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: userData !== null && userData !== void 0 && userData.profilePicture ? process.env.REACT_APP_PUBLIC_FOLDER + userData.profilePicture : process.env.REACT_APP_PUBLIC_FOLDER + 'defaultProfile.png',\n                alt: \"\",\n                className: \"followerImage\",\n                style: {\n                  width: '50px',\n                  height: '50px'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 85,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"name\",\n                style: {\n                  fontSize: \"0.8rem\"\n                },\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: [userData === null || userData === void 0 ? void 0 : userData.firstname, \" \", userData === null || userData === void 0 ? void 0 : userData.lastname]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 89,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n            style: {\n              width: '95%',\n              border: '0.1px solid #ececece',\n              marginTop: \"20px\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-body\",\n          children: messages.map(message => /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: scroll,\n              className: message.senderId === currentUser ? \"message own\" : \"message\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: message.text\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 101,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: format(message.createdAt)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 102,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 37\n            }, this)\n          }, void 0, false))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-sender\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"+\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(InputEmoji, {\n            value: newMessage,\n            onChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"send-button button\",\n            onClick: handleSend,\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"chatbox-empty-message\",\n        children: \"Tap on a Chat to start Conversation...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(Chatbox, \"xza5e3xBX8C1+pxGye0vtBklSw0=\");\n\n_c = Chatbox;\nexport default Chatbox;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chatbox\");","map":{"version":3,"sources":["D:/My Projects/SocialMediaApp - MERN/frontend/src/components/Chatbox/Chatbox.jsx"],"names":["React","useEffect","useRef","useState","getUser","addMessage","getMessages","format","InputEmoji","Chatbox","chat","currentUser","setSendMessage","recieveMessage","scroll","userData","setUserData","messages","setMessages","newMessage","setNewMessage","handleChange","userId","members","find","id","getUserData","data","error","console","log","fetchMessages","_id","err","chatId","handleSend","e","preventDefault","message","senderId","text","recieverId","profilePicture","process","env","REACT_APP_PUBLIC_FOLDER","width","height","fontSize","firstname","lastname","border","marginTop","map","createdAt"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\r\nimport { getUser } from '../../api/UserReq';\r\nimport './Chatbox.css';\r\nimport { addMessage, getMessages } from '../../api/MessageRequest';\r\nimport { format } from 'timeago.js';\r\nimport InputEmoji from 'react-input-emoji'\r\n\r\nconst Chatbox = ({ chat, currentUser, setSendMessage, recieveMessage }) => {\r\n    const scroll = useRef();\r\n    const [userData, setUserData] = useState(null);\r\n    const [messages, setMessages] = useState([]);\r\n    const [newMessage, setNewMessage] = useState(\"\");\r\n\r\n\r\n    const handleChange = (newMessage) => {\r\n        setNewMessage(newMessage)\r\n    }\r\n\r\n    // fetching data for header \r\n    useEffect(() => {\r\n        const userId = chat?.members?.find((id) => id !== currentUser);\r\n        const getUserData = async () => {\r\n            try {\r\n                const { data } = await getUser(userId);\r\n                setUserData(data);\r\n            } catch (error) {\r\n                console.log(error)\r\n            }\r\n        };\r\n        if (chat !== null) getUserData();\r\n    }, [chat, currentUser])\r\n\r\n\r\n    // fetching data for messages\r\n    useEffect(() => {\r\n        const fetchMessages = async () => {\r\n            try {\r\n                const { data } = await getMessages(chat._id);\r\n                console.log(data)\r\n                setMessages(data);\r\n            } catch (err) {\r\n                console.log(err);\r\n            }\r\n        }\r\n        if (chat != null) fetchMessages();\r\n    }, [chat])\r\n\r\n\r\n    useEffect(() => {\r\n        if (recieveMessage !== null && recieveMessage.chatId === chat._id) {\r\n            setMessages([...messages, recieveMessage]);\r\n        }\r\n    }, [recieveMessage])\r\n\r\n    // Send Message\r\n    const handleSend = async (e) => {\r\n        e.preventDefault();\r\n        const message = {\r\n            senderId: currentUser,\r\n            text: newMessage,\r\n            chatId: chat._id,\r\n        }\r\n        // send message to socket server\r\n        const recieverId = chat.members.find((id) => id !== currentUser);\r\n        setSendMessage({ ...message, recieverId });\r\n\r\n        // send message to database\r\n        try {\r\n            const { data } = await addMessage(message);\r\n            setMessages([...messages, data]);\r\n            setNewMessage(\"\");\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"ChatBox-container\">\r\n                {chat ? (\r\n                    <>\r\n                        <div className=\"chat-header\">\r\n                            <div className=\"follower\">\r\n                                <div>\r\n                                    <img src={userData?.profilePicture ? process.env.REACT_APP_PUBLIC_FOLDER + userData.profilePicture : process.env.REACT_APP_PUBLIC_FOLDER + 'defaultProfile.png'} alt='' className='followerImage'\r\n                                        style={{ width: '50px', height: '50px' }}\r\n                                    />\r\n                                    <div className=\"name\" style={{ fontSize: \"0.8rem\" }}>\r\n                                        <span>{userData?.firstname} {userData?.lastname}</span>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <hr style={{ width: '95%', border: '0.1px solid #ececece' , marginTop:\"20px\"}} />\r\n                        </div>\r\n\r\n                        {/*  chatbox messages*/}\r\n                        <div className=\"chat-body\">\r\n                            {messages.map((message) => (\r\n                                <>\r\n                                    <div ref={scroll} className={message.senderId === currentUser ? \"message own\" : \"message\"}>\r\n                                        <span>{message.text}</span>\r\n                                        <span>{format(message.createdAt)}</span>\r\n                                    </div>\r\n                                </>\r\n                            ))}\r\n                        </div>\r\n                        {/* chat sender */}\r\n                        <div className=\"chat-sender\">\r\n                            <div>+</div>\r\n                            <InputEmoji value={newMessage} onChange={handleChange} />\r\n                            <div className=\"send-button button\" onClick={handleSend}>Send</div>\r\n                        </div>\r\n                    </>\r\n                )\r\n                    : (\r\n                        <span className='chatbox-empty-message'>Tap on a Chat to start Conversation...</span>\r\n                    )\r\n                }\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Chatbox"]},"metadata":{},"sourceType":"module"}